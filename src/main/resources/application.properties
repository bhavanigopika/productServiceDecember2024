spring.application.name=ProductServiceDecember2024
logging.level.org.springframework=TRACE

spring.jpa.hibernate.ddl-auto=update

spring.datasource.url=jdbc:mysql://localhost:3306/productservicedec2024
#spring.datasource.url=jdbc:mysql://productservicedec2024.c3muygwyeupu.us-east-1.rds.amazonaws.com:3306/productservicedec2024
spring.datasource.username=productservicedec2024user5
#spring.datasource.password=secret

#spring.datasource.url=${PRODUCT_SERVICE_DB_URL}
#spring.datasource.username=${PRODUCT_SERVICE_DB_USER}
#spring.datasource.password=${PRODUCT_SERVICE_DB_PASSWORD}

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql: true

spring.jpa.properties.hibernate.format_sql=true

eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

#server.port=8082
#now, let's mark server port as like environment variables "server.port=${PRODUCT_SERVICE_PORT}" to understand ServiceDiscovery/Eureka Server
server.port=${PRODUCT_SERVICE_PORT}

#my.bean.qualifier=dbProductService

#spring.jpa.show-sql: true
#Tells that, jpa shows me the sql queries here when I am running the application like
# findAllById() -> select * from

#application.properties is a configuration file

#spring.jpa.hibernate.ddl-auto=create
#Effect: Drops and re-creates the database schema on every application restart
#Usecase: Best for development or test environment because you want to start with a clean schema every time

#sring.jpa.hibernate.ddl-auto=update
#Effect: updates the existing schema without dropping the tables
#Usecase: Best for production environment

#spring.datasource.url=${PRODUCT_SERVICE_DB_URL}
#spring.datasource.username=${PRODUCT_SERVICE_DB_USER}
#spring.datasource.password=${PRODUCT_SERVICE_DB_PASSWORD}
